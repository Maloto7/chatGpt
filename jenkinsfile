def dockerImageTag = "springboot-deploy:${env.BUILD_NUMBER}"

node {
    stage('Clone Repo') {
        checkout scm
        echo "Cloning branch: ${env.BRANCH_NAME}"
    }

    stage('Build docker') {
        echo "Docker Image Tag Name: ${dockerImageTag}"
        bat "mvn clean package -DskipTests"
        def dockerImage = docker.build("${dockerImageTag}")
    }

    stage('Deploy docker') {
        echo "Docker Image Tag Name: ${dockerImageTag}"
        bat '(docker stop springboot-deploy || exit /B 0) && (docker rm springboot-deploy || exit /B 0)'
        bat "docker run --name springboot-deploy -d -p8083:8083 ${dockerImageTag}"
    }

    stage('Integration test') {
        bat "mvn clean test"
    }

    stage('Report') {
        allure includeProperties: true, jdk: '', reportBuildPolicy: 'ALWAYS', results: [[path: 'target/allure-results']]
    }

    stage('Allure HTML Report') {
        bat 'allure generate --clean --output allure-html target\\allure-results\\'
        bat 'powershell.exe -command "Compress-Archive -Path allure-html -DestinationPath allure-html\\allure-report.zip"'
        step([$class: 'ArtifactArchiver', artifacts: 'allure-html/allure-report.zip', fingerprint: true, onlyIfSuccessful: true])
    }

    stage('Send Email') {
        emailext(
            to: 'agustin.encora@gmail.com',
            subject: "Allure Report: ${env.JOB_NAME} #${env.BUILD_NUMBER}",
            body: 'Please find the Allure report attached.',
            attachmentsPattern: 'allure-html/allure-report.zip'
        )
    }
}
