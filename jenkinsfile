node {
    def dockerImageTag = "springboot-deploy${env.BUILD_NUMBER}"
    try{
    //notifyBuild('STARTED')
        stage('Clone Repo') {
            checkout scm
            echo "Cloning branch: ${env.BRANCH_NAME}"
        }
        stage('Build docker') {
            echo "Docker Image Tag Name: ${dockerImageTag}"
            bat"mvn clean package -DskipTests"
            dockerImage = docker.build("springboot-deploy:${env.BUILD_NUMBER}")
        }
        stage('Deploy docker'){
            echo "Docker Image Tag Name: ${dockerImageTag}"
            bat '(docker stop springboot-deploy || exit /B 0) && (docker rm springboot-deploy || exit /B 0)'
            bat "docker run --name springboot-deploy -d -p8083:8083 springboot-deploy:${env.BUILD_NUMBER}"
        }
        stage('Integration test'){
            bat "mvn clean test"
        }
        stage('Report'){
            allure includeProperties: false, jdk: '', reportBuildPolicy: 'ALWAYS', results: [[path: 'target/allure-results']]
        }
        stage('Send Email') {
            emailext to: 'agustin.encora@gmail.com',
                subject: "Allure Report: ${env.JOB_NAME} #${env.BUILD_NUMBER}",
                body: "Please find the Allure report attached.",
                attachmentsPattern: '**/allure-report/**',
                mimeType: 'application/zip'
        }
    }catch(e){
//      currentBuild.result = "FAILED"
        throw e
    }finally{
//      notifyBuild(currentBuild.result)
    }
}