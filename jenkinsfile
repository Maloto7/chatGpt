node{
    def dockerImageTag
    def currentBranch

    stage('Clone Repo') {
        checkout scm
        currentBranch = env.BRANCH_NAME
        echo "Cloning branch: ${currentBranch}"
    }

    stage('Build docker') {
        dockerImageTag = "springboot-deploy:${env.BUILD_NUMBER}"
        echo "Building Docker image with tag: ${dockerImageTag}"
        bat 'mvn clean package -DskipTests'
        bat "docker build -t ${dockerImageTag} ."
    }

    stage('Deploy docker') {
        bat "docker stop ${dockerImageTag} || true"
        bat "docker rm ${dockerImageTag} || true"
        bat "docker run -d --name ${dockerImageTag} -p 8083:8083 ${dockerImageTag}"
    }

    stage('Integration test') {
        bat 'mvn clean verify -DskipUTs'
    }

    stage('Report') {
        allure([
            includeProperties: true,
            jdk: '',
            properties: [],
            reportBuildPolicy: 'ALWAYS',
            results: [[path: 'target/allure-results']]
        ])
    }

    stage('Allure HTML Report') {
        bat "allure generate target/allure-results --clean -o allure-html"
        bat "tar -czvf allure-html.zip allure-html"
        archiveArtifacts artifacts: 'allure-html.zip', onlyIfSuccessful: true
    }

    stage('Send Email') {
        emailext (
            to: 'agustin.encora@gmail.com',
            subject: "${env.JOB_NAME} Build #${env.BUILD_NUMBER}",
            body: 'Please find the Allure HTML report attached.',
            attachmentsPattern: '**/allure-html.zip'
        )
    }
}
